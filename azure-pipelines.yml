# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-2019' # Windows Server 2019 with Visual Studio 2019

variables:
  # patch will be incremented at each build. This is useful to create a unique build version.
  patch: $[counter(variables['Build.Reason'], 0)]
  version: 1.1.$(variables['patch'])
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

name: $(Build.Reason)-$(version)

steps:
- task: PowerShell@2
  displayName: Update version in the vsix manifest
  inputs:
    filePath: 'Build\update-version.ps1'
    arguments: '$(version)'
    pwsh: true

- task: NuGetCommand@2
  displayName: NuGet restore
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'

- task: VSBuild@1
  displayName: Build solution
  inputs:
    solution: '**\*.sln'
    maximumCpuCount: true
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: Run tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Publish all needed files for the Release pipeline
- task: CopyFiles@2
  displayName: Copy Artifacts to staging
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      README.md
      Build/**
      PinnacleCodingConvention/Resources/**
      **/*.vsix
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'drop'
    targetPath: '$(Build.ArtifactStagingDirectory)'